pipeline {
    
    environment {
        DOCKER_ID = credentials('DOCKER_ID')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
        BUILDER_NAME = 'mbuilder'
        SERVICE = 'plant-it'
    }

    parameters {
        booleanParam(name: "BACKEND_TESTS", defaultValue: true, description: "Run the backend tests")
        booleanParam(name: "BACKEND_BUILD_IMAGE", defaultValue: true, description: "Build the backend docker images")
        booleanParam(name: "BACKEND_PUSH_IMAGE", defaultValue: true, description: "Push the backend image on Docker Hub")
        booleanParam(name: "FRONTEND_TESTS", defaultValue: true, description: "Run the frontend tests")
        booleanParam(name: "FRONTEND_BUILD_IMAGE", defaultValue: true, description: "Build the backend docker images")
        booleanParam(name: "FRONTEND_PUSH_IMAGE", defaultValue: true, description: "Push the frontend image on Docker Hub")
        text(name: "IMAGES_VERSION", defaultValue: "X.X.X", description: "Version of the docker images")
        booleanParam(name: "IMAGES_LATEST", defaultValue: false, description: "Update the latest version of the images on Docker Hub")
    }

    agent any
    stages {
        stage('Build and test') {
            parallel {
                stage('Backend') {
                    failFast true
                    agent {
                        docker {
                            image "maven:3-eclipse-temurin-20"
                            args "-u root"
                        }
                    }
                    stages {
                        stage('Build') {
                            steps {
                                dir("backend") {
                                    echo 'Compiling...'
                                    sh 'mvn clean install -DskipTests -Dcheckstyle.skip'
                                }
                            }
                        }
                        stage('Test') {
                            when { environment name: 'BACKEND_TESTS', value: 'true' }
                            steps {
                                dir("backend") {
                                    echo 'Testing...'
                                    sh 'mvn verify -Dcheckstyle.skip'     
                                }
                            }
                        }
                        stage('Checkstyle') {
                            steps {
                                dir("backend") {
                                    echo 'Checkstyle...'
                                    sh 'mvn checkstyle:check'
                                }
                            }
                        }
                        stage('Package') {
                            when { environment name: 'BACKEND_BUILD_IMAGE', value: 'true' }
                            steps {
                                dir("backend") {
                                    echo 'Packaging...'
                                    sh 'mvn package -DskipTests -Dcheckstyle.skip'
                                    stash includes: 'target/*.jar', name: 'jarFiles'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            dir("backend") {
                                sh 'mvn clean'
                            }
                        }
                    }
                }
                stage('Frontend') {
                    failFast true
                    agent {
                        docker {
                            image 'node:21.6.0-slim'
                        }
                    }
                    stages {
                        stage('Build') {
                            steps {
                                dir("frontend") {
                                    echo 'Compiling frontend...'
                                    sh """
                                        npm install
                                        CI=false npm run build
                                    """
                                }
                            }
                        }
                        stage('Test') {
                            when { environment name: 'FRONTEND_TESTS', value: 'true' }
                            steps {
                                dir("frontend") {
                                    sh """
                                        npm test -- --watchAll=false
                                    """
                                    echo 'Testing...'
                                    echo 'Testing stub'  
                                }
                            }
                        }
                    }
                    post {
                        always {
                            dir("frontend") {
                                sh 'rm -rf build'
                            }
                        }
                    }
                }     
            }
            post {
                failure {
                    script {
                        def title = "${JOB_NAME} build failed"
                        def tag = "rotating_light"
                        def failingStepName = currentBuild.rawBuild.getExecutor().getOwner().getDisplayName()
                        def failingStepMessage = currentBuild.rawBuild.getLog(70)
                        def body = "- Build id: ${env.BUILD_ID}\n- Build result: ${currentBuild.result}\n- Build branch: ${BRANCH_NAME}\n- Time: ${currentBuild.durationString}\n-Failing step: ${failingStepName}\n- Error log: ${failingStepMessage}"

                        sh "curl -H \"Title: ${title}\" -H \"Tags: ${tag}\" -X POST http://192.168.1.108:19492/jenkins -d '${body}'"
                    }
                }
            }
        }
        stage('Build and publish docker images of backend') {
            agent any
            stages {
                stage('Login') {
                    when {
                        expression {
                            return params.BACKEND_BUILD_IMAGE || params.FRONTEND_BUILD_IMAGE
                        }
                    }
                    steps {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_ID --password-stdin'
                    }
                }
                stage("Create Buildx Builder") {
                    when {
                        expression {
                            return params.BACKEND_BUILD_IMAGE || params.FRONTEND_BUILD_IMAGE
                        }
                    }
                    steps {
                        sh """
                        docker context create $BUILDER_NAME
                        docker context use $BUILDER_NAME
                        docker buildx create --bootstrap --use $BUILDER_NAME
                        """
                    }
                }
                stage("Build (and publish) multi-arch image") {
                    failFast true
                    parallel {
                        stage('Build backend image') {
                            when { environment name: 'BACKEND_BUILD_IMAGE', value: 'true' }
                            steps {
                                dir("backend") {
                                    unstash 'jarFiles'
                                    script {
                                        if (params.BACKEND_PUSH_IMAGE) {
                                            sh """
                                                docker buildx build --progress=plain --no-cache --push --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-backend:$params.IMAGES_VERSION -f deployment/Dockerfile .
                                            """
                                            if (params.IMAGES_LATEST) {
                                                sh """
                                                    docker buildx build --progress=plain --no-cache --push --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-backend:latest -f deployment/Dockerfile .
                                                """
                                            }
                                        } else {
                                            sh """
                                                docker buildx build --progress=plain --no-cache --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-backend:$params.IMAGES_VERSION -f deployment/Dockerfile .
                                            """
                                        }
                                    }
                                }
                            }
                        }
                        stage('Build frontend image') {
                            when { environment name: 'FRONTEND_BUILD_IMAGE', value: 'true' }
                            steps {
                                dir("frontend") {
                                    script {
                                        if (params.FRONTEND_PUSH_IMAGE) {
                                            sh """
                                                docker buildx build --progress=plain --no-cache --push --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-frontend:$params.IMAGES_VERSION -f deployment/Dockerfile .
                                            """
                                            if (params.IMAGES_LATEST) {
                                                sh """
                                                    docker buildx build --progress=plain --no-cache --push --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-frontend:latest -f deployment/Dockerfile .
                                                """
                                            }
                                        } else {
                                            sh """
                                                docker buildx build --progress=plain --no-cache --platform linux/amd64,linux/arm64 -t $DOCKER_ID/$SERVICE-frontend:$params.IMAGES_VERSION -f deployment/Dockerfile .
                                            """
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        if (params.BACKEND_BUILD_IMAGE || params.FRONTEND_BUILD_IMAGE) {
                            sh """
                                docker stop \$(docker ps -a -q)
                                docker images -q | xargs --no-run-if-empty docker rmi -f
                                docker buildx use default
                                docker context rm $BUILDER_NAME
                                rm -rf backend/target
                            """
                        }
                        def title = "${JOB_NAME} build "
                        def tag = "tada"
                        def body = "- Build id: ${env.BUILD_ID}\n- Build result: ${currentBuild.result}\n- Build branch: ${BRANCH_NAME}\n- Time: ${currentBuild.durationString}"
                        if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                            title += "succeeded"
                        } else {
                            def failingStepName = currentBuild.rawBuild.getExecutor().getOwner().getDisplayName()
                            def failingStepMessage = currentBuild.rawBuild.getLog(70)
                            title += "failed"
                            tag = "rotating_light"

                            body += "\n-Failing step: ${failingStepName}\n- Error log: ${failingStepMessage}"
                        }
                        sh "curl -H \"Title: ${title}\" -H \"Tags: ${tag}\" -X POST http://192.168.1.108:19492/jenkins -d '${body}'"
                    }
                }
            }
        }
    }
}
