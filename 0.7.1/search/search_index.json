{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-plant-it","title":"What is Plant-it?","text":"<p>Plant-it is a gardening companion app that helps you take care of your plants.</p> <p>It does not recommend you about which action to take, instead it is designed to logs the activity you are doing. This is on purpose, I strongly believe that the only one in charge of know when to water your plants, when to fertilize them, etc. is you (with the help of multiple online sources).</p> <p>Plant-it helps you remember the last time you did a treatment of your plants, which plants you have, collects photos of your plants, and notify you about time passed since last action on them.</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<p>Plant-It is designed for gardening enthusiasts, plant lovers, and anyone seeking a comprehensive and user-friendly platform to enhance their gardening experience. Whether you are a beginner looking to start your first garden or an experienced gardener wanting to streamline plant care and tracking, Plant-It offers a self-hosted gardening companion app to meet your needs. This application is tailored for individuals passionate about keeping their plants healthy, receiving timely care reminders, documenting plant growth, and enjoying a seamless gardening experience.</p>"},{"location":"#high-level-overview","title":"High-level overview","text":"<p>Plant-it can do the following things:</p> <ul> <li>Add existing plants using Trefle API or user created plants to your collection</li> <li>Log events like watering, fertilizing, biostimulating, etc. for your plants</li> <li>View all the logged events, filtering by plant and event type</li> <li>Upload photos of your plants</li> <li>Set reminder for some actions on your plants (e.g. notify if not watered every 4 days)</li> </ul>"},{"location":"app-installation/","title":"App Installation","text":"<p>To illustrate how to use the various components of this project, let's assume you have deployed the server Docker image on a machine with the IP address <code>192.168.1.5</code> and have kept the default port configurations. Specifically, the API is running on port <code>8080</code>, and the frontend is running on port <code>3000</code>.</p> <p>The sections below will guide you on how to use the app via different platforms. By following the steps in each section, you will be able to effectively use the system on various platforms.</p>"},{"location":"app-installation/#web-app","title":"Web App","text":"<p>To access the web application, follow these steps:</p> <ol> <li>Open your web browser and navigate to <code>http://192.168.1.5:3000</code>.</li> <li>You will see a page like the following:</li> </ol> <p> </p> <ol> <li>In the server URL field, enter <code>http://192.168.1.5:8080</code> and click on \"Continue\".</li> </ol> <p>You can now either log in if you already have an account or sign up to create a new one. Once logged in, you can start using the app.</p>"},{"location":"app-installation/#android","title":"Android","text":"<p>For Android devices, you have two options to use the app:</p>"},{"location":"app-installation/#web-app_1","title":"Web App","text":"<ol> <li>Open your preferred browser on your Android device.</li> <li>Navigate to <code>http://192.168.1.5:3000</code> and follow the same steps as described in the Web App section.</li> </ol>"},{"location":"app-installation/#apk","title":"APK","text":"<p>Alternatively, you can use the native Android application by installing the APK file:</p> <ol> <li>Download the APK file from the GitHub releases assets or FDroid.</li> <li>Install the APK on your device (ensure you have enabled installation from unknown sources in your settings).</li> <li>Open the app and follow the instructions to set up and start using it.</li> </ol>"},{"location":"app-installation/#ios","title":"iOS","text":"<p>Currently, the native iOS application is not available. However, you can use the web app on your iOS device by following these steps:</p> <ol> <li>Open Safari and navigate to <code>http://192.168.1.5:3000</code>.</li> <li>You will see a page like the following:</li> </ol> <p> </p> <ol> <li>Tap the share button in the navigation bar.</li> <li>Scroll down and tap on \"Add to Home Screen\".</li> <li>The web app will now be installed on your device as a PWA (Progressive Web App).</li> <li>Open the newly installed app and follow the steps in the Web App section to start using it.</li> </ol>"},{"location":"app-installation/#rest-api","title":"REST API","text":"<p>For direct interaction with the server via the REST API:</p> <ol> <li>Open your browser and navigate to the Swagger UI available at <code>http://192.168.1.5:8080/api/swagger-ui/index.html</code>.</li> </ol> <p>The Swagger UI provides a comprehensive interface to interact with the API endpoints. Here, you can perform all main operations supported by the API, including authentication, data retrieval, and data manipulation.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#homescreen","title":"Homescreen","text":"<p>The app's home screen is designed to provide users with a comprehensive view of their stored plants and associated events. On this screen, users can easily view the latest chronological events related to their plants and access a list of the plants they own.</p>"},{"location":"features/#plant","title":"Plant","text":""},{"location":"features/#add-a-new-plant","title":"Add a new plant","text":"<p>To add a new plant, simply tap the search icon in the bottom bar. From there, you can either add a custom species or, if you setup a Trefle key, explore and add existing species to your collection.</p> <p>Upon identifying the plant species, select it, click on \"Add plant\" at the bottom of the page, then input the necessary information, and proceed by clicking the \"Add\" button. For those without a Trefle key or wishing to add a new species, opt for the \"Custom\" species option, provide the required details, and then click on the \"Save plant\" button.</p>"},{"location":"features/#view-details","title":"View details","text":"<p>To access comprehensive plant details, simply open the plant from the home screen. Here, you'll find a detailed overview of the plant, including information about the associated species.</p>"},{"location":"features/#edit-details-or-remove-plant","title":"Edit details or remove plant","text":"<p>To modify plant details, select the plant, then click on the edit icon in the bottom appbar of the view, proceed to update the information, and click the \"Update\" floating button. For plant deletion, click the trash icon in the bottom appbar of the view.</p>"},{"location":"features/#events","title":"Events","text":""},{"location":"features/#add-a-new-event","title":"Add a new event","text":"<p>To create a new event, simply tap the plus button in the bottom bar. From there, you can link one or multiple plants, select one or multiple event types, choose the date, and insert a note. Complete the process by clicking the \"Add\" floating button.</p>"},{"location":"features/#view-all-events","title":"View all events","text":"<p>To access all saved events, select the \"calendar\" icon in the button bar. Here, you'll find a chronological list of all events, and you can further filter them by plants and/or type for convenient organization.</p>"},{"location":"features/#edit-or-remove-existing-event","title":"Edit or remove existing event","text":"<p>To modify or delete an event, choose it from either the home screen or the \"diary\" view within the app. Subsequently, click on the \"Remove\" button in order to remove it, or change the information and then click on the \"Save\" floating button.</p>"},{"location":"features/#species","title":"Species","text":""},{"location":"features/#create-new-species","title":"Create new species","text":"<p>To add a new species, tap the search icon in the bottom bar, enter the species name, and select the \"Custom\" species option. Enter the necessary details and then click \"Save plant\" to create the new species.</p>"},{"location":"features/#edit-existing-species","title":"Edit existing species","text":"<p>To modify an existing species, tap the search icon in the bottom bar, enter the species name, and select it. Next, click the edit icon in the bottom appbar of the window, make the necessary updates, and then click the floating \"Save\" button. The species will be updated. If it originated from the Trefle service, a new custom species will be generated, and all plants linked to the Trefle species will be associated with the new one. If it was already a custom species, it will be straightforwardly updated.</p>"},{"location":"features/#remove-existing-species","title":"Remove existing species","text":"<p>To delete a species, it must be a custom one. Tap the search icon in the bottom bar, enter the species name, and select it. Next, click the trash icon in the bottom appbar of the window,. Please be aware that this action will also delete all linked plants associated with the species.</p>"},{"location":"features/#reminders","title":"Reminders","text":"<p>The Reminder feature in the project allows users to set up reminders for specific actions related to their plants. </p>"},{"location":"features/#add-a-new-reminder","title":"Add a new reminder","text":"<p>Follow the steps below to create a new reminder:</p> <ul> <li>Navigate to Plant Detail View: Open the detail view of the desired plant by selecting it from the plant list. Once in the detail view, locate and click on the \"Plant\" section.</li> <li>Access Reminders Section: Within the \"Plant\" section, scroll down until you find the \"Reminders\" subsection. Here, you can manage existing reminders, including removing or disabling them, as well as creating new ones.</li> <li>Create a New Reminder: To create a new reminder, click on the \"add\" icon provided in the reminders section.</li> <li>Fill Required Information: You will be prompted to fill in the following required information for the new reminder:<ul> <li>Type: Specify the type of action to be reminded of.</li> <li>Start Date: Set the date from which you want the reminders to start.</li> <li>Frequency: Choose how often you want to be reminded if the specified action is not completed for the plant.</li> <li>Repeat After: Optionally, set a time interval after which reminders should be sent again if the action remains incomplete.</li> <li>End Date: Optionally, provide an end date for the reminder.</li> <li>Enabled: Toggle the reminder on or off as needed.</li> </ul> </li> <li>Save Reminder: After filling in the required information, save the reminder to activate it for the selected plant.</li> </ul>"},{"location":"features/#edit-or-delete-a-reminder","title":"Edit or delete a reminder","text":"<p>In order to edit or delete an existing reminder click on it. Edit the information as needed and then click on the floating \"Save\" button in order to update it, or click on the trash icon in the upper right in order to delete the reminder.</p>"},{"location":"features/#reminder-notification","title":"Reminder notification","text":"<p>The Reminder Dispatcher feature in the application allows users to customize how they receive notifications for expired reminders. Follow the steps below to change the reminder dispatcher:</p> <ul> <li>Access App Settings: Navigate to the application's settings by locating and clicking on the settings icon in the bottom bar</li> <li>Open Reminder Notification Settings: Within the settings menu, look for the \"Notifications\" section or option. Click on it to access the reminder notification settings.</li> <li>Select Dispatcher: In the reminder notification settings, you will find options to configure the reminder dispatcher. Choose the desired dispatcher by checking the corresponding checkbox.</li> <li>Save Changes: After selecting the desired reminder dispatcher, save the changes to apply the new notification settings.</li> </ul>"},{"location":"server-installation/","title":"Server Installation","text":""},{"location":"server-installation/#prerequisite","title":"Prerequisite","text":"<p>Before installing Plant-it, make sure you have the following prerequisites:</p> <ul> <li><code>docker</code> version 3 or above</li> <li><code>docker-compose</code></li> </ul>"},{"location":"server-installation/#quickstart","title":"Quickstart","text":"<p>Installing Plant-it is pretty straight forward, in order to do so follow these steps:</p> <ul> <li>Create a folder where you want to place all Plant-it related files.</li> <li> <p>Inside that folder, create a file named <code>docker-compose.yml</code> with this content: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n      - \"./certs:/certificates\"\n    ports:\n      - \"8080:8080\"\n      - \"3000:3000\"\n\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n\n  cache:\n    image: redis:7.2.1\n    restart: always\n</code></pre></p> </li> <li> <p>Inside that folder, create a file named <code>server.env</code> with this content: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=putTheSecretHere\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=-1\nUPLOAD_DIR=/upload-dir\nAPI_PORT=8080\nTREFLE_KEY=\nLOG_LEVEL=DEBUG\nALLOWED_ORIGINS=*\n\n#\n# Cache\n#\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\n\n#\n# SSL\n#\nSSL_ENABLED=false\nCERTIFICATE_PATH=/certificates/\n</code></pre></p> </li> <li> <p>Run the docker compose file (<code>docker compose -f docker-compose.yml up -d</code>), then the service will be available at <code>localhost:3000</code>, while the REST API will be available at <code>localhost:8080/api</code> (<code>localhost:8080/api/swagger-ui/index.html</code> for the documentation of them).</p> </li> </ul>"},{"location":"server-installation/#configuration","title":"Configuration","text":"<p>The <code>server.env</code> file is used to pass configurations to the server. An example of properties and descriptions is the following: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=putTheSecretHere\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=-1 # less then 0 means no limit\nUPLOAD_DIR=/upload-dir # path to the directory used to store uploaded images, if on docker deployment leave as it is and change the volume binding in the docker-compose file if needed\nAPI_PORT=8080\nTREFLE_KEY=\nALLOWED_ORIGINS=* # CORS allowed origins (comma separated list)\nLOG_LEVEL=DEBUG # could be: DEBUG, INFO, WARN, ERROR\nUPDATE_EXISTING=false # update missing fields using Trefle service, useful on system version update if new fields are introduced\nCONTACT_MAIL=foo@bar.com # address used as \"contact\" for template email\nREMINDER_NOTIFY_CHECK=0 30 7 * * * # 6-values crontab expression to set the check time for reminders\nMAX_REQUESTS_PER_MINUTE=100 # rate limiting of the upcoming requests\nNTFY_ENABLED=true # if \"false\" ntfy service won't be available as notification dispatcher\n\n#\n# SSL\n#\nSSL_ENABLED=false\nCERTIFICATE_PATH=/certificates/ # path to files to use for ssl. If on docker deployment leave as it is and change the volume binding in the docker-compose file if needed\n\n#\n# Cache\n#\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\n\n#\n# SMTP\n#\nSMTP_HOST=\nSMTP_PORT=\nSMTP_EMAIL=\nSMTP_PASSWORD=\nSMTP_AUTH=\nSMTP_START_TTL=\n</code></pre></p>"},{"location":"server-installation/#change-ports-binding","title":"Change ports binding","text":""},{"location":"server-installation/#backend","title":"Backend","text":"<p>If you don't want to use the default port <code>8080</code>, you can do the following:</p> <ul> <li>change the port binding in the <code>docker-compose.yml</code> file, e.g. <code>9090:8080</code> to setup the port <code>9090</code> for the backend service,</li> </ul>"},{"location":"server-installation/#frontend","title":"Frontend","text":"<p>If you don't want to use the default port <code>3000</code>, you can do the following:</p> <ul> <li>change the port binding in the <code>docker-compose.yml</code> file, e.g. <code>4040:3000</code> to setup the port <code>4040</code> for the frontend service</li> </ul>"},{"location":"server-installation/#complete-example","title":"Complete example","text":"<p>Let's say that you want to run Plant-it on a server with IP <code>http://192.168.1.103</code> and want to have:</p> <ul> <li>the backend on port <code>8089</code>,</li> <li>the frontend on port <code>3009</code>.</li> </ul> <p>Then this will be you configuration for the <code>docker-compose.yml</code> file: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n      - \"./certs:/certificates\"\n    ports:\n      - \"8089:8080\"\n      - \"3009:3000\"\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n  cache:\n    image: redis:7.2.1\n    restart: always\n</code></pre> And this will be you configuration for the <code>server.env</code> file: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=32characterscomplicatedsecret\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=2\nUPLOAD_DIR=/upload-dir\nAPI_PORT=8080\nTREFLE_KEY=\nALLOWED_ORIGINS=*\n\n#\n# Cache\n#\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\n\n#\n# SSL\n#\nSSL_ENABLED=false\nCERTIFICATE_PATH=/certificates/\n</code></pre></p>"},{"location":"server-installation/#example-of-traefik-deployment","title":"Example of traefik deployment","text":"<p>This is an example of deployment using traefik: <pre><code>version: '3'\nservices:\n  reverse-proxy:\n    image: traefik:v3.0\n    command: --api.insecure=true --providers.docker\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.app.rule=Host(`plant-it.docker.localhost`)\"\n      - \"traefik.http.routers.app.service=server\"\n      - \"traefik.http.routers.app.entrypoints=http\"\n      - \"traefik.http.services.server.loadbalancer.server.port=3000\"\n\n      - \"traefik.http.routers.api.rule=Host(`plant-it-api.docker.localhost`)\"\n      - \"traefik.http.routers.api.service=server-api\"\n      - \"traefik.http.routers.api.entrypoints=http\"\n      - \"traefik.http.services.server-api.loadbalancer.server.port=8080\"\n\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n    labels:\n      - \"traefik.enable=false\"\n\n  cache:\n    image: redis:7.2.1\n    restart: always\n    labels:\n      - \"traefik.enable=false\"\n</code></pre></p> <p>Visit <code>http://plant-it.docker.localhost</code> for accessing the app, and <code>http://plant-it-api.docker.localhost/api/swagger-ui/index.html</code> for accessing the Swagger UI. Use <code>http://plant-it-api.docker.localhost</code> as server URL when request in the app setup.</p>"},{"location":"server-installation/#smtp-configuration-for-email-notifications","title":"SMTP Configuration for Email Notifications","text":"<p>An SMTP server can be used to send notifications to users, such as password reset emails. To configure the usage of an SMTP server, the following properties need to be set in the <code>server.env</code> file:</p> <ul> <li>SMTP_HOST: The host of the SMTP server.</li> <li>SMTP_PORT: The port of the SMTP server.</li> <li>SMTP_EMAIL: The email address used to send notifications.</li> <li>SMTP_PASSWORD: The password of the email account used for authentication.</li> <li>SMTP_AUTH: This parameter enables or disables authentication for the SMTP server.</li> <li>SMTP_START_TLS: This parameter enables or disables the use of STARTTLS for secure communication with the SMTP server.</li> <li>CONTACT_MAIL: contact address to use in the email templates if a user want to contact the administrator</li> </ul> <p>Email credentials</p> <p>Please note that some providers, such as Gmail, may require the use of an application-specific password for authentication.</p>"},{"location":"server-installation/#example-gmail-configuration","title":"Example Gmail Configuration","text":"<pre><code>SMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_EMAIL=your-email@gmail.com\nSMTP_PASSWORD=your-application-password\nSMTP_AUTH=true\nSMTP_START_TTL=true\nCONTACT_MAIL=your-email@gmail.com\n</code></pre>"},{"location":"server-installation/#enable-ssl","title":"Enable SSL","text":"<p>Deprecation</p> <p>Please be aware that SSL feature is deprecated. If you want to use SSL, you can use some application proxy like traefik or nginx.</p> <p>To enable SSL for your Plant-it deployment, follow these steps:</p> <ol> <li>Set SSL Enabled Property: Ensure that SSL is enabled by adding the property <code>SSL_ENABLED=true</code> to the <code>server.env</code> file.</li> <li>Create Volume Binding: Add a volume binding <code>\"./certs:/certificates\"</code> to the <code>server.env</code> services in your <code>docker-compose.yml</code> file. This allows the services to access SSL certificates stored in the <code>./certs</code> directory.</li> </ol>"},{"location":"server-installation/#complete-example_1","title":"Complete Example","text":"<p>Let's say that you want to run Plant-it on a server with IP <code>https://192.168.1.103</code> and want to have:</p> <ul> <li>the backend on port <code>8089</code>,</li> <li>the frontend on port <code>3009</code>.</li> </ul> <p><code>docker-compose.yml</code>: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n      - \"certs:/certificates\"\n    ports:\n      - \"8089:8080\"\n      - \"3009:3000\"\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n  cache:\n    image: redis:7.2.1\n    restart: always\n</code></pre></p> <p><code>server.env</code>: <pre><code>MYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\nJWT_SECRET=32characterscomplicatedsecret\nJWT_EXP=1\nUSERS_LIMIT=2\nUPLOAD_DIR=/upload-dir\nAPI_PORT=8080\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\nTREFLE_KEY=\nALLOWED_ORIGINS=*\nSSL_ENABLED=true\nCERTIFICATE_PATH=/certificates/ \n</code></pre></p> <p>This setup creates a self-hosted certificate for both the backend and frontend services.</p> <p>Accept certificates</p> <p>In some cases, certain browsers may require explicit acceptance of certificates from both the frontend and backend of the application, even if they share the same certificate. This scenario typically arises when encountering a \"Cannot connect to the backend\" error message and SSL is enabled. To resolve this issue, users may need to navigate to both the frontend and backend URLs of the application and manually accept the certificate presented by each. By acknowledging the certificates, users can establish a trusted connection between their browser and the application's frontend and backend servers, thereby resolving connectivity issues.</p>"},{"location":"server-installation/#provide-custom-certificate","title":"Provide Custom Certificate","text":"<p>If you prefer to use your own certificate, simply place the <code>app.key</code> and <code>app.crt</code> files inside the <code>CERTIFICATE_PATH</code> folder.</p>"},{"location":"server-installation/#get-the-api-key","title":"Get the API Key","text":"<p>In order to get the API key, it's needed to use the REST API of the service:</p> <ol> <li>Open your browser and navigate to <code>http://&lt;server-ip&gt;:&lt;server-port&gt;/api/swagger-ui/index.html</code>.</li> <li>Obtain a JWT token by calling the <code>POST /authentication/login</code> endpoint with your credentials.</li> <li>Set the JWT token in Swagger for the subsequent calls by using the \"Authorize\" button at the top.</li> <li>Create a new API key by calling the <code>POST /api-key</code> endpoint, optionally passing a name for the key.</li> </ol>"},{"location":"server-installation/#homepage-dashboard-integration","title":"Homepage dashboard integration","text":"<p>The project offers a widget for integrates the service with the popular dashboard called homepage. In order to use it, simply place the widget as above in the configuration yml file of the dashboard: <pre><code>- Plant-it:\n    href: &lt;server-app-url&gt;\n    description: \ud83e\udeb4 Self-hosted, open source gardening companion app\n    widget:\n      type: plantit\n      url: &lt;server-backend-url&gt;\n      key: &lt;you-key&gt;\n</code></pre> You can get the API Key following the step in the relative section.</p>"},{"location":"server-installation/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>This guide will help you deploy your project using Kubernetes with Minikube. Follow the steps below to set up and access your application.</p>"},{"location":"server-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have Minikube installed and running.</li> <li>Ensure <code>kubectl</code> is installed and configured to communicate with your Minikube cluster.</li> <li>(if using Helm) Ensure Helm is installed.</li> </ul>"},{"location":"server-installation/#deployment-steps","title":"Deployment Steps","text":""},{"location":"server-installation/#using-kubectl","title":"Using kubectl","text":"<p>First, download the contents of the <code>deployment/kubernetes</code> directory from the project repository, then:</p> <ol> <li> <p>Run Minikube: <pre><code>minikube start --driver=docker --mount --mount-string=\"/tmp/plant-it-data:/mnt/data\"\n</code></pre></p> </li> <li> <p>Deploy the DB Secrets: <pre><code>kubectl apply -f secret.yml\n</code></pre></p> </li> <li> <p>Deploy the DB ConfigMaps: <pre><code>kubectl apply -f config.yml\n</code></pre></p> </li> <li> <p>Deploy the Database: <pre><code>kubectl apply -f db.yml\n</code></pre></p> </li> <li> <p>Deploy the Cache: <pre><code>kubectl apply -f cache.yml\n</code></pre></p> </li> <li> <p>Deploy the Server: <pre><code>kubectl apply -f server.yml\n</code></pre></p> </li> </ol> <p>If you want to change the configuration values, edit the content of <code>config.yml</code> and <code>secret.yml</code> files.</p>"},{"location":"server-installation/#using-helm","title":"Using Helm","text":"<p>First, download the contents of the <code>deployment/helm</code> directory from the project repository, then:</p> <ol> <li> <p>Run Minikube: <pre><code>minikube start --driver=docker --mount --mount-string=\"/tmp/plant-it-data:/mnt/data\"\n</code></pre></p> </li> <li> <p>Create and Modify <code>my-values.yml</code> File:    Create a new file called <code>my-values.yml</code> to override the default settings provided in the <code>values.yml</code> file. You can copy the content from <code>values.yml</code> and modify it according to your configuration needs. This ensures your custom values are applied without altering the default configuration.</p> </li> <li> <p>Install the Helm Chart: <pre><code>helm install plantit helm --values helm/values.yml -f helm/my-values.yml\n</code></pre>    This command confirms that the values in <code>helm/values.yml</code> will be used as the base configuration, and any values specified in <code>helm/my-values.yml</code> will override the defaults.</p> </li> </ol>"},{"location":"server-installation/#using-truecharts","title":"Using TrueCharts","text":"<p>The Plant-it service is also available on TrueCharts, which simplifies the deployment process. You can find the chart for Plant-it here. </p> <p>Please note that I am not the creator of these charts. For any issues or detailed instructions on how to deploy using TrueCharts, please refer to the official TrueCharts documentation.</p>"},{"location":"server-installation/#access-the-application","title":"Access the Application","text":"<p>Once the deployment is complete, you can access the application and its Swagger UI at the following URLs:</p> <ul> <li>Application: <code>http://&lt;minikube_ip&gt;:3000</code></li> <li>Swagger UI: <code>http://&lt;minikube_ip&gt;:8080/api/swagger-ui/index.html</code></li> </ul> <p>Replace <code>&lt;minikube_ip&gt;</code> with the IP address returned by the following command:</p> <pre><code>minikube ip\n</code></pre>"},{"location":"server-installation/#known-issue-minikube-ip-not-accessible","title":"\u26a0 Known Issue - Minikube IP not Accessible","text":"<p>If you encounter issues accessing the NodePort service using <code>MinikubeIP:NodePort</code>, execute the following command to expose the service and obtain a direct URL:</p> <pre><code>minikube service server-service\n</code></pre> <p>Then, open the printed links in your browser to access the application and Swagger UI.</p>"},{"location":"support/","title":"Support","text":""},{"location":"support/#ask-for-help","title":"Ask for help","text":"<p>If you need support using Plant-it come find us!</p> <ul> <li>Github issues for questions and support</li> <li>Follow me on linkedin to remain in contact</li> </ul>"},{"location":"support/#support-the-project","title":"Support the project","text":"<p>If you find this project helpful and would like to supporting it, consider buying me a coffee. Your generosity helps keep this project alive and ensures its continued development and improvement.</p>"},{"location":"support/#contributing","title":"Contributing","text":"<p>Feel free to contribute and help improve the project.</p>"},{"location":"support/#contributing-translations-to-the-project","title":"Contributing Translations to the Project","text":"<p>If you're interested in contributing transactions to enhance the app, you can get started by following the guide provided here. Your support and contributions are greatly appreciated.</p>"},{"location":"support/#bug-report-feature-request-and-question","title":"Bug Report, Feature Request and Question","text":"<p>You can submit any of this in the github issues section of the repository. Chose the right template and then fill the required info.</p>"},{"location":"support/#bug-fix","title":"Bug fix","text":"<p>If you fix a bug, please follow the contribution guideline in order to merge the fix in the repository.</p>"},{"location":"support/#feature-development","title":"Feature development","text":"<p>Let's discuss first possible solutions for the development before start working on that, please open a feature request issue.</p>"},{"location":"support/#contribution-guideline","title":"Contribution guideline","text":"<p>To fix a bug or create a feature, follow these steps:</p> <ol> <li>Fork the repo</li> <li>Create a new branch (<code>git checkout -b awesome-feature</code>)</li> <li>Make changes or add new changes</li> <li>Commit your changes (<code>git add -A; git commit -m 'Awesome new feature'</code>)</li> <li>Push to the branch (<code>git push origin awesome-feature</code>)</li> <li>Create a Pull Request</li> </ol>"},{"location":"support/#conventions","title":"Conventions","text":"<p>Commits should follow the semantic commit specification, although not mandatory.</p>"}]}