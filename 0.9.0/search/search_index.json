{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-plant-it","title":"What is Plant-it?","text":"<p>Plant-it is a gardening companion app that helps you take care of your plants.</p> <p>It does not recommend you about which action to take, instead it is designed to logs the activity you are doing. This is on purpose, I strongly believe that the only one in charge of know when to water your plants, when to fertilize them, etc. is you (with the help of multiple online sources).</p> <p>Plant-it helps you remember the last time you did a treatment of your plants, which plants you have, collects photos of your plants, and notify you about time passed since last action on them.</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<p>Plant-It is designed for gardening enthusiasts, plant lovers, and anyone seeking a comprehensive and user-friendly platform to enhance their gardening experience. Whether you are a beginner looking to start your first garden or an experienced gardener wanting to streamline plant care and tracking, Plant-It offers a self-hosted gardening companion app to meet your needs. This application is tailored for individuals passionate about keeping their plants healthy, receiving timely care reminders, documenting plant growth, and enjoying a seamless gardening experience.</p>"},{"location":"#high-level-overview","title":"High-level overview","text":"<p>Plant-it can do the following things:</p> <ul> <li>Add existing plants or user created plants to your collection</li> <li>Log events like watering, fertilizing, biostimulating, etc. for your plants</li> <li>View all the logged events, filtering by plant and event type</li> <li>Upload photos of your plants</li> <li>Set reminder for some actions on your plants (e.g. notify if not watered every 4 days)</li> </ul>"},{"location":"app-installation/","title":"App Installation","text":"<p>To illustrate how to use the various components of this project, let's assume you have deployed the server Docker image on a machine with the IP address <code>192.168.1.5</code> and have kept the default port configurations. Specifically, the API is running on port <code>8080</code>, and the frontend is running on port <code>3000</code>.</p> <p>The sections below will guide you on how to use the app via different platforms. By following the steps in each section, you will be able to effectively use the system on various platforms.</p>"},{"location":"app-installation/#web-app","title":"Web App","text":"<p>To access the web application, follow these steps:</p> <ol> <li>Open your web browser and navigate to <code>http://192.168.1.5:3000</code>.</li> <li>You will see a page like the following:</li> </ol> <p> </p> <ol> <li>In the server URL field, enter <code>http://192.168.1.5:8080</code> and click on \"Continue\".</li> </ol> <p>You can now either log in if you already have an account or sign up to create a new one. Once logged in, you can start using the app.</p>"},{"location":"app-installation/#android","title":"Android","text":"<p>For Android devices, you have two options to use the app:</p>"},{"location":"app-installation/#web-app_1","title":"Web App","text":"<ol> <li>Open your preferred browser on your Android device.</li> <li>Navigate to <code>http://192.168.1.5:3000</code> and follow the same steps as described in the Web App section.</li> </ol>"},{"location":"app-installation/#apk","title":"APK","text":"<p>Alternatively, you can use the native Android application by installing the APK file:</p> <ol> <li>Download the APK file from the GitHub releases assets or FDroid.</li> <li>Install the APK on your device (ensure you have enabled installation from unknown sources in your settings).</li> <li>Open the app and follow the instructions to set up and start using it.</li> </ol>"},{"location":"app-installation/#ios","title":"iOS","text":"<p>Currently, the native iOS application is not available. However, you can use the web app on your iOS device by following these steps:</p> <ol> <li>Open Safari and navigate to <code>http://192.168.1.5:3000</code>.</li> <li>You will see a page like the following:</li> </ol> <p> </p> <ol> <li>Tap the share button in the navigation bar.</li> <li>Scroll down and tap on \"Add to Home Screen\".</li> <li>The web app will now be installed on your device as a PWA (Progressive Web App).</li> <li>Open the newly installed app and follow the steps in the Web App section to start using it.</li> </ol>"},{"location":"app-installation/#rest-api","title":"REST API","text":"<p>For direct interaction with the server via the REST API:</p> <ol> <li>Open your browser and navigate to the Swagger UI available at <code>http://192.168.1.5:8080/api/swagger-ui/index.html</code>.</li> </ol> <p>The Swagger UI provides a comprehensive interface to interact with the API endpoints. Here, you can perform all main operations supported by the API, including authentication, data retrieval, and data manipulation.</p>"},{"location":"developer/","title":"Developer","text":""},{"location":"developer/#overview","title":"Overview","text":"<p>This page provides a comprehensive guide on setting up, contributing to, and testing the codebase for the Plant-it project. Whether you're working on the backend or the frontend, you'll find all the necessary steps and tools to get started here.</p>"},{"location":"developer/#requirements","title":"Requirements","text":"<p>Before you can run and test the project, ensure you have the following tools installed:</p>"},{"location":"developer/#backend","title":"Backend","text":"<ul> <li> <p>OpenJDK: Version 21 or higher is required to compile and run the backend.  </p> </li> <li> <p>Maven: A build automation tool for managing project dependencies and building the backend.  </p> </li> </ul>"},{"location":"developer/#frontend","title":"Frontend","text":"<ul> <li>Flutter: Ensure you have Flutter installed to build and run the frontend. You can follow the official installation guide for your operating system.</li> </ul>"},{"location":"developer/#cli","title":"CLI","text":""},{"location":"developer/#backend_1","title":"Backend","text":"<p>To compile and run the backend:  </p> <ol> <li> <p>Navigate to the <code>backend</code> folder: <pre><code>cd backend\n</code></pre></p> </li> <li> <p>Compile the backend by running:     <pre><code>mvn clean install\n</code></pre></p> </li> <li> <p>Start the backend server with the development profile:     <pre><code>mvn spring-boot:run -Dspring-boot.run.profiles=dev\n</code></pre></p> </li> <li> <p>Open your browser and navigate to http://localhost:8085/api/swagger-ui/index.html. Here, you can view the API's Swagger documentation and test the endpoints.</p> </li> </ol>"},{"location":"developer/#frontend_1","title":"Frontend","text":"<p>To run the frontend:</p> <ol> <li> <p>Navigate to the frontend folder:     <pre><code>cd frontend\n</code></pre></p> </li> <li> <p>Start the frontend on a web server by running:     <pre><code>flutter run -d web-server --web-port=56134\n</code></pre></p> </li> <li> <p>Open your browser and navigate to http://localhost:56134. This will display the Plant-it application.</p> </li> </ol>"},{"location":"developer/#ide","title":"IDE","text":""},{"location":"developer/#backend_2","title":"Backend","text":"<p>For backend development, we recommend using IntelliJ IDEA:</p> <ol> <li> <p>Download and install IntelliJ IDEA (Community or Ultimate edition).</p> </li> <li> <p>Open the IDE.</p> </li> <li> <p>Navigate to File &gt; Open and select the backend folder.</p> </li> <li> <p>Wait for IntelliJ to index the project and download dependencies.</p> </li> <li> <p>Use the built-in Run/Debug Configuration for managing and running your Spring Boot application.</p> </li> </ol>"},{"location":"developer/#frontend_2","title":"Frontend","text":"<p>For frontend development, we recommend using Visual Studio Code:</p> <ol> <li> <p>Download and install Visual Studio Code.</p> </li> <li> <p>Download and install Chrome Browser (required for web development)</p> </li> <li> <p>Open the IDE.</p> </li> <li> <p>Navigate to File &gt; Open Folder and select the frontend folder.</p> </li> <li> <p>Install the Flutter and Dart extensions from the Extensions Marketplace for enhanced development support.</p> </li> <li> <p>In the bottom-right corner of the IDE, select <code>Chrome (web-javascript)</code> as the device.</p> </li> <li> <p>Open the <code>lib/main.dart</code> file and click on Run.</p> </li> </ol>"},{"location":"developer/#workflow","title":"Workflow","text":""},{"location":"developer/#backend_3","title":"Backend","text":"<p>In order to test changes for the backend:</p> <ol> <li> <p>Made the changes</p> </li> <li> <p>Compile and test the project by running: <code>mvn clean install</code></p> </li> <li> <p>If the compilation and tests pass, start the project: <code>mvn spring-boot:run -Dspring-boot.run.profiles=dev</code></p> </li> <li> <p>Connect the frontend or navigate to http://localhost:8085/api/swagger-ui/index.html to test the API.</p> </li> </ol>"},{"location":"developer/#frontend_3","title":"Frontend","text":"<p>In order to test changes for the frontend:</p> <ol> <li> <p>Make your changes in the codebase.</p> </li> <li> <p>Test the project by running: <code>flutter test</code></p> </li> <li> <p>If the tests are ok, then run the project <code>flutter run -d web-server --web-port=56134</code></p> </li> <li> <p>Connect to the frontend at http://localhost:56134 to verify the changes.</p> </li> </ol>"},{"location":"developer/#additional-resources","title":"Additional Resources","text":"<ul> <li> <p>Flutter Documentation: Learn about Flutter development and troubleshooting.</p> </li> <li> <p>Spring Boot Documentation: Reference material for Spring Boot.</p> </li> <li> <p>Maven Documentation: Guides for working with Maven.</p> </li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#homescreen","title":"Homescreen","text":"<p>The app's home screen is designed to provide users with a comprehensive view of their stored plants and associated events. On this screen, users can easily view the latest chronological events related to their plants and access a list of the plants they own.</p>"},{"location":"features/#plant","title":"Plant","text":""},{"location":"features/#add-a-new-plant","title":"Add a new plant","text":"<p>To add a new plant, simply tap the search icon in the bottom bar. From there, you can either add a custom species or, if you setup a FloraCodex key, explore and add existing species to your collection.</p> <p>Upon identifying the plant species, select it, click on \"Add plant\" at the bottom of the page, then input the necessary information, and proceed by clicking the \"Add\" button. For those without a FloraCodex key or wishing to add a new species, opt for the \"Custom\" species option, provide the required details, and then click on the \"Save plant\" button.</p>"},{"location":"features/#view-details","title":"View details","text":"<p>To view detailed information about a plant, open it from the home screen. You\u2019ll see a comprehensive overview, including details about the plant and its associated species.</p> <ul> <li>In the \"Activity\" section, you can find events and reminders specific to that plant.</li> <li>The \"Plant\" section provides detailed information about the individual plant.</li> <li>The \"Species\" section contains information about the plant\u2019s species.</li> </ul>"},{"location":"features/#edit-details-or-remove-plant","title":"Edit details or remove plant","text":"<p>To modify plant details, select the plant, then click on the edit icon in the bottom appbar of the view, proceed to update the information, and click the \"Update\" floating button. For plant deletion, click the trash icon in the bottom appbar of the view.</p>"},{"location":"features/#events","title":"Events","text":""},{"location":"features/#add-a-new-event","title":"Add a new event","text":"<p>To create a new event, simply tap the plus button in the bottom bar. From there, you can link one or multiple plants, select one or multiple event types, choose the date, and insert a note. Complete the process by clicking the \"Add\" floating button.</p>"},{"location":"features/#view-all-events","title":"View all events","text":"<p>To access all saved events, select the \"calendar\" icon in the button bar, then click on the \"Events\" section. Here, you'll find a chronological list of all events, and you can further filter them by plants and/or type for convenient organization.</p>"},{"location":"features/#edit-or-remove-existing-event","title":"Edit or remove existing event","text":"<p>To modify or delete an event, choose it from either the home screen or the \"diary\" view within the app. Subsequently, click on the \"Remove\" button in order to remove it, or change the information and then click on the \"Save\" floating button.</p>"},{"location":"features/#species","title":"Species","text":""},{"location":"features/#create-new-species","title":"Create new species","text":"<p>To add a new species, tap the search icon in the bottom bar, enter the species name, and select the \"Custom\" species option. Enter the necessary details and then click \"Save plant\" to create the new species.</p>"},{"location":"features/#edit-existing-species","title":"Edit existing species","text":"<p>To modify an existing species, tap the search icon in the bottom bar, enter the species name, and select it. Next, click the edit icon in the bottom appbar of the window, make the necessary updates, and then click the floating \"Save\" button. The species will be updated. If it originated from the FloraCodex service, a new custom species will be generated, and all plants linked to the FloraCodex species will be associated with the new one. If it was already a custom species, it will be straightforwardly updated.</p>"},{"location":"features/#remove-existing-species","title":"Remove existing species","text":"<p>To delete a species, it must be a custom one. Tap the search icon in the bottom bar, enter the species name, and select it. Next, click the trash icon in the bottom appbar of the window,. Please be aware that this action will also delete all linked plants associated with the species.</p>"},{"location":"features/#reminders","title":"Reminders","text":"<p>The Reminder feature in the project allows users to set up reminders for specific actions related to their plants.</p>"},{"location":"features/#view-upcoming-reminder-occurrences","title":"View Upcoming Reminder Occurrences","text":"<p>  To see the upcoming reminder occurrences for your plants, follow these steps:</p> <ul> <li>Open the Calendar: Click on the \"Calendar\" icon located in the bottom bar of the app.</li> <li>Navigate to the Reminder Section: Once in the Calendar view, switch to the \"Reminder\" section. Here, you'll find a calendar displaying all scheduled reminder occurrences.</li> <li>View Daily Details: Click on a specific day in the calendar to see a detailed list of reminder occurrences, along with the associated plants. This allows you to quickly check which tasks need attention on a particular day.</li> </ul>"},{"location":"features/#add-a-new-reminder","title":"Add a new reminder","text":"<p>Follow the steps below to create a new reminder:</p> <ul> <li>Navigate to Plant Detail View: Open the detail view of the desired plant by selecting it from the plant list. Once in the detail view, locate and click on the \"Activity\" section.</li> <li>Access Reminders Section: Within the \"Activity\" section, scroll down until you find the \"Reminders\" subsection. Here, you can manage existing reminders, including removing or disabling them, as well as creating new ones.</li> <li>Create a New Reminder: To create a new reminder, click on the \"add\" icon provided in the reminders section.</li> <li>Fill Required Information: You will be prompted to fill in the following required information for the new reminder:<ul> <li>Type: Specify the type of action to be reminded of.</li> <li>Start Date: Set the date from which you want the reminders to start.</li> <li>Frequency: Choose how often you want to be reminded if the specified action is not completed for the plant.</li> <li>Repeat After: Optionally, set a time interval after which reminders should be sent again if the action remains incomplete.</li> <li>End Date: Optionally, provide an end date for the reminder.</li> <li>Enabled: Toggle the reminder on or off as needed.</li> </ul> </li> <li>Save Reminder: After filling in the required information, save the reminder to activate it for the selected plant.</li> </ul>"},{"location":"features/#edit-or-delete-a-reminder","title":"Edit or delete a reminder","text":"<p>In order to edit or delete an existing reminder click on it. Edit the information as needed and then click on the floating \"Save\" button in order to update it, or click on the trash icon in the upper right in order to delete the reminder.</p>"},{"location":"features/#reminder-notification","title":"Reminder notification","text":"<p>The Reminder Dispatcher feature in the application allows users to customize how they receive notifications for expired reminders. Follow the steps below to change the reminder dispatcher:</p> <ul> <li>Access App Settings: Navigate to the application's settings by locating and clicking on the settings icon in the bottom bar</li> <li>Open Reminder Notification Settings: Within the settings menu, look for the \"Notifications\" section or option. Click on it to access the reminder notification settings.</li> <li>Select Dispatcher: In the reminder notification settings, you will find options to configure the reminder dispatcher. Choose the desired dispatcher by checking the corresponding checkbox.</li> <li>Save Changes: After selecting the desired reminder dispatcher, save the changes to apply the new notification settings.</li> </ul>"},{"location":"server-installation/","title":"Server Installation","text":""},{"location":"server-installation/#prerequisite","title":"Prerequisite","text":"<p>Before installing Plant-it, make sure you have the following prerequisites:</p> <ul> <li><code>docker</code> version 3 or above</li> <li><code>docker-compose</code></li> </ul>"},{"location":"server-installation/#quickstart","title":"Quickstart","text":"<p>Installing Plant-it is pretty straight forward, in order to do so follow these steps:</p> <ul> <li>Create a folder where you want to place all Plant-it related files.</li> <li> <p>Inside that folder, create a file named <code>docker-compose.yml</code> with this content: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n    ports:\n      - \"8080:8080\"\n      - \"3000:3000\"\n\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n\n  cache:\n    image: redis:7.2.1\n    restart: always\n</code></pre></p> </li> <li> <p>Inside that folder, create a file named <code>server.env</code> with this content: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=putTheSecretHere\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=-1\nUPLOAD_DIR=/upload-dir\nAPI_PORT=8080\nFLORACODEX_KEY=\nLOG_LEVEL=DEBUG\nALLOWED_ORIGINS=*\n\n#\n# Cache\n#\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\n</code></pre></p> </li> <li> <p>Run the docker compose file (<code>docker compose -f docker-compose.yml up -d</code>), then the service will be available at <code>localhost:3000</code>, while the REST API will be available at <code>localhost:8080/api</code> (<code>localhost:8080/api/swagger-ui/index.html</code> for the documentation of them).</p> </li> </ul>"},{"location":"server-installation/#configuration","title":"Configuration","text":"<p>The <code>server.env</code> file is used to pass configurations to the server. An example of properties and descriptions is the following: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=putTheSecretHere\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=-1 # less then 0 means no limit\nUPLOAD_DIR=/upload-dir # path to the directory used to store uploaded images, if on docker deployment leave as it is and change the volume binding in the docker-compose file if needed\nAPI_PORT=8080\nFLORACODEX_URL=https://api.floracodex.com\nFLORACODEX_KEY=\nALLOWED_ORIGINS=* # CORS allowed origins (comma separated list)\nLOG_LEVEL=DEBUG # could be: DEBUG, INFO, WARN, ERROR\nCONTACT_MAIL=foo@bar.com # address used as \"contact\" for template email\nREMINDER_NOTIFY_CHECK=0 30 7 * * * # 6-values crontab expression to set the check time for reminders\nMAX_REQUESTS_PER_MINUTE=100 # rate limiting of the upcoming requests\n\n#\n# Notification\n#\nNTFY_ENABLED=true # if \"false\" ntfy service won't be available as notification dispatcher\nGOTIFY_ENABLED=true # if \"false\" ntfy service won't be available as notification dispatcher\n\n#\n# Cache\n#\nCACHE_TYPE=redis # Cache type. By default, it's \"redis\" but can also be \"none\"\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\nCACHE_PASSWORD=\nCACHE_USERNAME=\n\n#\n# SMTP\n#\nSMTP_HOST=\nSMTP_PORT=\nSMTP_EMAIL=\nSMTP_PASSWORD=\nSMTP_AUTH=\nSMTP_START_TTL=\n</code></pre></p>"},{"location":"server-installation/#integration-with-floracodex","title":"Integration with FloraCodex","text":"<p>To enhance your application with plant search capabilities, you can integrate with the FloraCodex service. FloraCodex provides a comprehensive API for searching and retrieving plant information. Follow the steps below to configure and use the FloraCodex service in your project:</p> <ol> <li> <p>Create an Account on FloraCodex:</p> <ul> <li>Visit the FloraCodex website and sign up for an account.</li> <li>Follow the registration process to verify your account.</li> </ul> </li> <li> <p>Retrieve the API Key:</p> <ul> <li>Once your account is set up, log in to your FloraCodex account.</li> <li>Navigate to the API section to generate or retrieve your API key. This key is necessary for authenticating your requests to the FloraCodex API.</li> </ul> </li> <li> <p>Configure the API Key:</p> <ul> <li>Open the <code>server.env</code> file in your project.</li> <li>Add the following line to the file, replacing <code>YOUR_FLORACODEX_API_KEY</code> with the actual API key you obtained from FloraCodex: <code>FLORACODEX_KEY=YOUR_FLORACODEX_API_KEY</code></li> </ul> </li> <li> <p>Save and Restart Your Server:</p> <ul> <li>Save the changes made to the <code>server.env</code> file.</li> <li>Restart your server to apply the new configuration.</li> </ul> </li> </ol> <p>By following these steps, you enable your application to use the FloraCodex service for searching and retrieving information about existing plants. Ensure that your API key is kept secure and not exposed publicly to avoid unauthorized access.</p>"},{"location":"server-installation/#deployment-without-cache","title":"Deployment Without Cache","text":"<p>If you need to deploy the application without using a cache, you can disable the cache by setting the <code>CACHE_TYPE</code> environment variable to <code>none</code>. This prevents the application from attempting to connect to a cache service.</p> <p>Then, to remove the cache service from your deployment, update your docker-compose.yaml file as follows: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n    ports:\n      - \"8080:8080\"\n      - \"3000:3000\"\n\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n</code></pre></p>"},{"location":"server-installation/#deployment-without-docker","title":"Deployment Without Docker","text":"<p>If you prefer to install and run the server without using Docker, ensure that you have Java Runtime Environment (JRE) 21 installed on your system. Follow these steps to set up the server:</p> <ol> <li> <p>Download the Server JAR File:</p> <ul> <li>Obtain the <code>server.jar</code> file from the latest release of the project on GitHub.</li> </ul> </li> <li> <p>Set Environment Variables:</p> <ul> <li> <p>You can configure the necessary environment variables in two ways:</p> <ul> <li> <p>Option 1: Manually export them in your terminal based on your setup. For example:   <pre><code>export MYSQL_HOST=localhost &amp;&amp; \\\nexport MYSQL_PORT=3306 &amp;&amp; \\\n...\n</code></pre> Adjust these variables according to your specific setup.</p> </li> <li> <p>Option 2: Provide a <code>server.properties</code> file that contains all the required properties. You can download a template for this file from the project's repository and adjust it to suit your configuration.</p> </li> </ul> </li> </ul> </li> <li> <p>Run the Server:</p> <ul> <li>If you chose Option 1 (manually setting environment variables), run the server using the following command:   <pre><code>java -jar server.jar\n</code></pre></li> <li>If you chose Option 2 (using the <code>server.properties</code> file), run the server with the following command, specifying the location of your configuration file:   <pre><code>java -jar server.jar --spring.config.location=classpath:/&lt;path-to-server.properties&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"server-installation/#frontend-setup-without-docker","title":"Frontend Setup Without Docker","text":"<p>For the frontend, if you're using Android, you can use the provided APK available on GitHub releases or F-Droid. However, for iOS, a standalone app is not available. If you choose not to use Docker for the frontend, follow these steps:</p> <ol> <li> <p>Download the Frontend Files:</p> <ul> <li>Download the <code>client.tar.gz</code> file from the latest release of the project on GitHub.</li> </ul> </li> <li> <p>Uncompress the Files:</p> <ul> <li>Extract the contents of the <code>client.tar.gz</code> file:   <pre><code>tar -xzf client.tar.gz\n</code></pre></li> </ul> </li> <li> <p>Serve the Files:</p> <ul> <li>You can serve the frontend files locally using a simple HTTP server. For example, using Python:   <pre><code>python3 -m http.server 3000\n</code></pre></li> <li>Alternatively, you can serve the files using a web server like Nginx.</li> </ul> </li> </ol> <p>By following these instructions, you can deploy both the server and frontend components without relying on Docker. This setup provides flexibility if Docker is not available or desirable in your environment.</p>"},{"location":"server-installation/#change-ports-binding","title":"Change ports binding","text":""},{"location":"server-installation/#backend","title":"Backend","text":"<p>If you don't want to use the default port <code>8080</code>, you can do the following:</p> <ul> <li>change the port binding in the <code>docker-compose.yml</code> file, e.g. <code>9090:8080</code> to setup the port <code>9090</code> for the backend service,</li> </ul>"},{"location":"server-installation/#frontend","title":"Frontend","text":"<p>If you don't want to use the default port <code>3000</code>, you can do the following:</p> <ul> <li>change the port binding in the <code>docker-compose.yml</code> file, e.g. <code>4040:3000</code> to setup the port <code>4040</code> for the frontend service</li> </ul>"},{"location":"server-installation/#complete-example","title":"Complete example","text":"<p>Let's say that you want to run Plant-it on a server with IP <code>http://192.168.1.103</code> and want to have:</p> <ul> <li>the backend on port <code>8089</code>,</li> <li>the frontend on port <code>3009</code>.</li> </ul> <p>Then this will be you configuration for the <code>docker-compose.yml</code> file: <pre><code>name: plant-it\nservices:\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    volumes:\n      - \"./upload-dir:/upload-dir\"\n    ports:\n      - \"8089:8080\"\n      - \"3009:3000\"\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n  cache:\n    image: redis:7.2.1\n    restart: always\n</code></pre> And this will be you configuration for the <code>server.env</code> file: <pre><code>#\n# DB\n#\nMYSQL_HOST=db\nMYSQL_PORT=3306\nMYSQL_USERNAME=root\nMYSQL_PSW=root\nMYSQL_DATABASE=bootdb\nMYSQL_ROOT_PASSWORD=root\n\n#\n# JWT\n#\nJWT_SECRET=32characterscomplicatedsecret\nJWT_EXP=1\n\n#\n# Server config\n#\nUSERS_LIMIT=2\nUPLOAD_DIR=/upload-dir\nAPI_PORT=8080\nFLORACODEX_KEY=\nALLOWED_ORIGINS=*\n\n#\n# Cache\n#\nCACHE_TTL=86400\nCACHE_HOST=cache\nCACHE_PORT=6379\n</code></pre></p>"},{"location":"server-installation/#example-of-traefik-deployment","title":"Example of traefik deployment","text":"<p>This is an example of deployment using traefik: <pre><code>version: '3'\nservices:\n  reverse-proxy:\n    image: traefik:v3.0\n    command: --api.insecure=true --providers.docker\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n  server:\n    image: msdeluise/plant-it-server:latest\n    env_file: server.env\n    depends_on:\n      - db\n      - cache\n    restart: unless-stopped\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.app.rule=Host(`plant-it.docker.localhost`)\"\n      - \"traefik.http.routers.app.service=server\"\n      - \"traefik.http.routers.app.entrypoints=http\"\n      - \"traefik.http.services.server.loadbalancer.server.port=3000\"\n\n      - \"traefik.http.routers.api.rule=Host(`plant-it-api.docker.localhost`)\"\n      - \"traefik.http.routers.api.service=server-api\"\n      - \"traefik.http.routers.api.entrypoints=http\"\n      - \"traefik.http.services.server-api.loadbalancer.server.port=8080\"\n\n  db:\n    image: mysql:8.0\n    restart: always\n    env_file: server.env\n    volumes:\n      - \"./db:/var/lib/mysql\"\n    labels:\n      - \"traefik.enable=false\"\n\n  cache:\n    image: redis:7.2.1\n    restart: always\n    labels:\n      - \"traefik.enable=false\"\n</code></pre></p> <p>Visit <code>http://plant-it.docker.localhost</code> for accessing the app, and <code>http://plant-it-api.docker.localhost/api/swagger-ui/index.html</code> for accessing the Swagger UI. Use <code>http://plant-it-api.docker.localhost</code> as server URL when request in the app setup.</p>"},{"location":"server-installation/#smtp-configuration-for-email-notifications","title":"SMTP Configuration for Email Notifications","text":"<p>An SMTP server can be used to send notifications to users, such as password reset emails. To configure the usage of an SMTP server, the following properties need to be set in the <code>server.env</code> file:</p> <ul> <li>SMTP_HOST: The host of the SMTP server.</li> <li>SMTP_PORT: The port of the SMTP server.</li> <li>SMTP_EMAIL: The email address used to send notifications.</li> <li>SMTP_PASSWORD: The password of the email account used for authentication.</li> <li>SMTP_AUTH: This parameter enables or disables authentication for the SMTP server.</li> <li>SMTP_START_TLS: This parameter enables or disables the use of STARTTLS for secure communication with the SMTP server.</li> <li>CONTACT_MAIL: contact address to use in the email templates if a user want to contact the administrator</li> </ul> <p>Email credentials</p> <p>Please note that some providers, such as Gmail, may require the use of an application-specific password for authentication.</p>"},{"location":"server-installation/#example-gmail-configuration","title":"Example Gmail Configuration","text":"<pre><code>SMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_EMAIL=your-email@gmail.com\nSMTP_PASSWORD=your-application-password\nSMTP_AUTH=true\nSMTP_START_TTL=true\nCONTACT_MAIL=your-email@gmail.com\n</code></pre>"},{"location":"server-installation/#homepage-dashboard-integration","title":"Homepage dashboard integration","text":"<p>The project offers a widget for integrates the service with the popular dashboard called homepage. In order to use it, simply place the widget as above in the configuration yml file of the dashboard: <pre><code>- Plant-it:\n    href: &lt;server-app-url&gt;\n    description: \ud83e\udeb4 Self-hosted, open source gardening companion app\n    icon: plant-it\n    widget:\n      type: plantit\n      url: &lt;server-backend-url&gt;\n      key: &lt;you-key&gt;\n</code></pre> You can get the API Key following the step in the relative section.</p>"},{"location":"server-installation/#api-key-retrieval","title":"API Key Retrieval","text":"<p>To retrieve an API Key using the REST API, follow these steps:</p> <ol> <li> <p>Authenticate and Retrieve JWT Token:</p> <ul> <li>Send a <code>POST</code> request to the authentication endpoint to log in.</li> <li>Replace <code>&lt;server-url&gt;</code> with the actual server URL.</li> <li>Example using <code>curl</code>:</li> </ul> <pre><code>curl -X 'POST' \\\n'http://&lt;server-url&gt;/api/authentication/login' \\\n-H 'accept: */*' \\\n-H 'Content-Type: application/json' \\\n-d '{\n\"username\": \"user\",\n\"password\": \"user\"\n}'\n</code></pre> <ul> <li>Upon successful authentication, the response will contain a JWT token. This token is required for the next step.</li> </ul> </li> <li> <p>Generate API Key:</p> <ul> <li>With the JWT token, make an authenticated <code>POST</code> request to the API Key endpoint. You may optionally pass a name parameter for the API key.</li> <li>Example using <code>curl</code>:</li> </ul> <pre><code>curl -X 'POST' \\\n'http://&lt;server-url&gt;/api/api-key/' \\\n-H 'accept: */*' \\\n-H 'Authorization: Bearer &lt;JWT-token&gt;' \\\n-d ''\n</code></pre> </li> <li> <p>Receive API Key:</p> <ul> <li>The response from the API Key request will contain your newly generated API Key.</li> </ul> </li> </ol> <p>Make sure to store the API Key securely, as it will be used for authenticating your requests to the system.</p>"},{"location":"server-installation/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>This guide will help you deploy your project using Kubernetes with Minikube. Follow the steps below to set up and access your application.</p>"},{"location":"server-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have Minikube installed and running.</li> <li>Ensure <code>kubectl</code> is installed and configured to communicate with your Minikube cluster.</li> <li>(if using Helm) Ensure Helm is installed.</li> </ul>"},{"location":"server-installation/#deployment-steps","title":"Deployment Steps","text":""},{"location":"server-installation/#using-kubectl","title":"Using kubectl","text":"<p>First, download the contents of the <code>deployment/kubernetes</code> directory from the project repository, then:</p> <ol> <li> <p>Run Minikube: <pre><code>minikube start --driver=docker --mount --mount-string=\"/tmp/plant-it-data:/mnt/data\"\n</code></pre></p> </li> <li> <p>Deploy the DB Secrets: <pre><code>kubectl apply -f secret.yml\n</code></pre></p> </li> <li> <p>Deploy the DB ConfigMaps: <pre><code>kubectl apply -f config.yml\n</code></pre></p> </li> <li> <p>Deploy the Database: <pre><code>kubectl apply -f db.yml\n</code></pre></p> </li> <li> <p>Deploy the Cache: <pre><code>kubectl apply -f cache.yml\n</code></pre></p> </li> <li> <p>Deploy the Server: <pre><code>kubectl apply -f server.yml\n</code></pre></p> </li> </ol> <p>If you want to change the configuration values, edit the content of <code>config.yml</code> and <code>secret.yml</code> files.</p>"},{"location":"server-installation/#using-helm","title":"Using Helm","text":"<p>First, download the contents of the <code>deployment/helm</code> directory from the project repository, then:</p> <ol> <li> <p>Run Minikube: <pre><code>minikube start --driver=docker --mount --mount-string=\"/tmp/plant-it-data:/mnt/data\"\n</code></pre></p> </li> <li> <p>Create and Modify <code>my-values.yml</code> File:    Create a new file called <code>my-values.yml</code> to override the default settings provided in the <code>values.yml</code> file. You can copy the content from <code>values.yml</code> and modify it according to your configuration needs. This ensures your custom values are applied without altering the default configuration.</p> </li> <li> <p>Install the Helm Chart: <pre><code>helm install plantit helm --values helm/values.yml -f helm/my-values.yml\n</code></pre>    This command confirms that the values in <code>helm/values.yml</code> will be used as the base configuration, and any values specified in <code>helm/my-values.yml</code> will override the defaults.</p> </li> </ol>"},{"location":"server-installation/#using-truecharts","title":"Using TrueCharts","text":"<p>The Plant-it service is also available on TrueCharts, which simplifies the deployment process. You can find the chart for Plant-it here. </p> <p>Please note that I am not the creator of these charts. For any issues or detailed instructions on how to deploy using TrueCharts, please refer to the official TrueCharts documentation.</p>"},{"location":"server-installation/#access-the-application","title":"Access the Application","text":"<p>Once the deployment is complete, you can access the application and its Swagger UI at the following URLs:</p> <ul> <li>Application: <code>http://&lt;minikube_ip&gt;:3000</code></li> <li>Swagger UI: <code>http://&lt;minikube_ip&gt;:8080/api/swagger-ui/index.html</code></li> </ul> <p>Replace <code>&lt;minikube_ip&gt;</code> with the IP address returned by the following command:</p> <pre><code>minikube ip\n</code></pre>"},{"location":"server-installation/#known-issue-minikube-ip-not-accessible","title":"\u26a0 Known Issue - Minikube IP not Accessible","text":"<p>If you encounter issues accessing the NodePort service using <code>MinikubeIP:NodePort</code>, execute the following command to expose the service and obtain a direct URL:</p> <pre><code>minikube service server-service\n</code></pre> <p>Then, open the printed links in your browser to access the application and Swagger UI.</p>"},{"location":"support/","title":"Support","text":""},{"location":"support/#ask-for-help","title":"Ask for help","text":"<p>If you need support using Plant-it come find us!</p> <ul> <li>Github issues for questions and support</li> <li>Follow me on linkedin to remain in contact</li> </ul>"},{"location":"support/#support-the-project","title":"Support the project","text":"<p>If you find this project helpful and would like to supporting it, consider buying me a coffee. Your generosity helps keep this project alive and ensures its continued development and improvement.</p>"},{"location":"support/#contributing","title":"Contributing","text":"<p>Feel free to contribute and help improve the project.</p>"},{"location":"support/#contributing-translations-to-the-project","title":"Contributing Translations to the Project","text":"<p>If you're interested in contributing transactions to enhance the app, you can get started by following the guide provided here. Your support and contributions are greatly appreciated.</p>"},{"location":"support/#bug-report-feature-request-and-question","title":"Bug Report, Feature Request and Question","text":"<p>You can submit any of this in the github issues section of the repository. Chose the right template and then fill the required info.</p>"},{"location":"support/#bug-fix","title":"Bug fix","text":"<p>If you fix a bug, please follow the contribution guideline in order to merge the fix in the repository.</p>"},{"location":"support/#feature-development","title":"Feature development","text":"<p>Let's discuss first possible solutions for the development before start working on that, please open a feature request issue.</p>"},{"location":"support/#contribution-guideline","title":"Contribution guideline","text":"<p>To fix a bug or create a feature, follow these steps:</p> <ol> <li>Fork the repo</li> <li>Create a new branch (<code>git checkout -b awesome-feature</code>)</li> <li>Make changes or add new changes</li> <li>Commit your changes (<code>git add -A; git commit -m 'Awesome new feature'</code>)</li> <li>Push to the branch (<code>git push origin awesome-feature</code>)</li> <li>Create a Pull Request</li> </ol>"},{"location":"support/#conventions","title":"Conventions","text":"<p>Commits should follow the semantic commit specification, although not mandatory.</p>"}]}